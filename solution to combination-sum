// Time Complexity : O(2 ^ n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates == null || candidates.length == 0) {
            return new ArrayList<>();
        }
        result = new ArrayList<>();
        backtrack(candidates, target, 0, new ArrayList<>());
        return result;
    }
    private void backtrack(int[] candidates, int target, int index, List<Integer> path) {
        if(target < 0 || index == candidates.length) {
            return;
        }
        if(target == 0) {
            result.add(new ArrayList<>(path));
            return;
        }
        backtrack(candidates, target, index + 1, path);
        path.add(candidates[index]);
        backtrack(candidates, target - candidates[index], index, path);
        path.remove(path.size() - 1);
    }
}
